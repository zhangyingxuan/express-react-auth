"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var awilix_router_core_1 = require("awilix-router-core");
var invokers_1 = require("./invokers");
var express_1 = require("express");
/**
 * Registers one or multiple decorated controller classes.
 *
 * @param ControllerClass One or multiple "controller" classes
 *        with decorators to register
 */
function controller(ControllerClass) {
    var router = express_1.Router();
    if (Array.isArray(ControllerClass)) {
        ControllerClass.forEach(function (c) {
            return _registerController(router, awilix_router_core_1.getStateAndTarget(c));
        });
    }
    else {
        _registerController(router, awilix_router_core_1.getStateAndTarget(ControllerClass));
    }
    return router;
}
exports.controller = controller;
/**
 * Loads controllers for the given pattern.
 *
 * @param pattern
 * @param opts
 */
function loadControllers(pattern, opts) {
    var router = express_1.Router();
    awilix_router_core_1.findControllers(pattern, tslib_1.__assign(tslib_1.__assign({}, opts), { absolute: true })).forEach(_registerController.bind(null, router));
    return router;
}
exports.loadControllers = loadControllers;
/**
 * Reads the config state and registers the routes in the router.
 *
 * @param router
 * @param ControllerClass
 */
function _registerController(router, stateAndTarget) {
    if (!stateAndTarget) {
        return;
    }
    var state = stateAndTarget.state, target = stateAndTarget.target;
    var rolledUp = awilix_router_core_1.rollUpState(state);
    rolledUp.forEach(function (methodCfg, methodName) {
        methodCfg.verbs.forEach(function (httpVerb) {
            var _a;
            var method = httpVerb.toLowerCase();
            if (httpVerb === awilix_router_core_1.HttpVerbs.ALL) {
                method = 'all';
            }
            ;
            (_a = router)[method].apply(_a, tslib_1.__spreadArrays([methodCfg.paths], methodCfg.beforeMiddleware, [
                /*tslint:disable-next-line*/
                invokers_1.makeInvoker(target)(methodName)], methodCfg.afterMiddleware));
        });
    });
}
//# sourceMappingURL=controller.js.map